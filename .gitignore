# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
<<<<<<< HEAD
=======
develop-eggs/
>>>>>>> ad41ff2 (Initial commit)
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
<<<<<<< HEAD
*.manifest
*.spec

# Database files
*.db
*.sqlite
*.sqlite3
trading_journal.sqlite
trading_saas.db

# Logs
*.log
logs/
=======
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt
>>>>>>> ad41ff2 (Initial commit)

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
<<<<<<< HEAD

# Virtual environments
venv/
env/
ENV/
.env
.venv

# IDE specific files
.idea/
.vscode/
*.swp
*.swo
.DS_Store

# Jupyter Notebook
.ipynb_checkpoints

# Generated files and directories
data/generated/
*.pickle
*.pkl
*.npy
*.h5
*.csv
*.json
*.parquet

# Large media files
*.png
*.jpg
*.jpeg
*.gif
*.mp4
*.mov
*.pdf

# Node.js
node_modules/
*.node
frontend/node_modules/
frontend/.next/
.npm
.pnp.js

# Binary files
*.so*
*.so.*
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
pytest_cache/
.pytest_cache/
=======
cover/
>>>>>>> ad41ff2 (Initial commit)

# Translations
*.mo
*.pot
<<<<<<< HEAD
*.log
=======
>>>>>>> ad41ff2 (Initial commit)

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
<<<<<<< HEAD
=======
.pybuilder/
>>>>>>> ad41ff2 (Initial commit)
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

<<<<<<< HEAD
# pipenv
# According to Python official guidance, should be included in version control:
# https://packaging.python.org/guides/tool-recommendations/
# Pipfile.lock

# poetry
# poetry.lock

# pdm
# pdm.lock
# .pdm.toml

# PEP 582; __pypackages__ directory
=======
# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
>>>>>>> ad41ff2 (Initial commit)
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

<<<<<<< HEAD
# SageMath files
=======
# SageMath parsed files
>>>>>>> ad41ff2 (Initial commit)
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

<<<<<<< HEAD
# pytype static Pylint Strong Type Hints
=======
# pytype static type analyzer
>>>>>>> ad41ff2 (Initial commit)
.pytype/

# Cython debug symbols
cython_debug/

<<<<<<< HEAD
# VS Code files for settings and debugging
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Ruff
.ruff_cache/

# Node.js
node_modules/
dist/
.next/
out/
build/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnp/
.pnp.js

# Browser drivers
chromedriver*
geckodriver*
msedgedriver*

# macOS
.DS_Store

# Linux
*~

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# JetBrains IDEs
.idea/

# Ignore Pylance cache
.pylance*
=======
# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc
>>>>>>> ad41ff2 (Initial commit)
